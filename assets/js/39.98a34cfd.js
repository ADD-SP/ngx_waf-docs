(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{367:function(t,e,s){"use strict";s.r(e);var a=s(25),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"configuration-guide"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration-guide"}},[t._v("#")]),t._v(" Configuration Guide")]),t._v(" "),e("p",[t._v("You can enable ngx_waf by adding configuration to a "),e("code",[t._v("server")]),t._v(" block inside "),e("code",[t._v("nginx.conf")]),t._v(".\nHere is an example.")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("The configurations listed below are required if you intend to change them unless you know what it means.")])]),t._v(" "),e("h2",{attrs:{id:"lts-version"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lts-version"}},[t._v("#")]),t._v(" LTS version")]),t._v(" "),e("div",{staticClass:"language-nginx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-nginx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ...\n    "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ...\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# on means enabled, off means disabled.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("on")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The absolute path to the directory where the rule file is located, must end with /.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_rule_path")]),t._v(" /usr/local/src/ngx_waf/assets/rules/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Firewall working mode, STD indicates standard mode.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_mode")]),t._v(" STD")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CC defense parameter, 1000 requests per minute limit, ")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# block the corresponding ip for 60 minutes after exceeding the limit.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_cc_deny")]),t._v(" rate=1000r/m duration=60m")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Cache detection results for up to 50 detection targets, ")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# effective for all detections ")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# except IP black and white list detection, CC protection and POST detection.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_cache")]),t._v(" capacity=50")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        ...\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ...\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"current-version"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#current-version"}},[t._v("#")]),t._v(" 'Current' version")]),t._v(" "),e("div",{staticClass:"language-nginx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-nginx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_zone")]),t._v(" name=waf size=20m")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ...\n    "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ...\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# on means enabled, off means disabled.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("on")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The absolute path to the directory where the rule file is located, must end with /.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_rule_path")]),t._v(" /usr/local/src/ngx_waf/assets/rules/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Firewall working mode, STD indicates standard mode.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_mode")]),t._v(" STD")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CC defense parameter, 1000 requests per minute limit, ")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# block the corresponding ip for 60 minutes after exceeding the limit.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_cc_deny")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("on")]),t._v(" rate=1000r/m duration=60m zone=waf:cc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Cache detection results for up to 50 detection targets, ")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# effective for all detections ")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# except IP black and white list detection, CC protection and POST detection.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("waf_cache")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("on")]),t._v(" capacity=50")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        ...\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ...\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);